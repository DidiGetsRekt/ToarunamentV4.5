; KFM's constants and state file.
; There are comments scattered through this file, so you may like to
; take a look if would like to learn more about the cns.

[Data]
;Amount of life to start with
life = 1000
;attack power (more is stronger)
attack = 100
;defensive power (more is stronger)
defence = 100

power= 5000
;Percentage to increase defense everytime player is knocked down
fall.defence_up = 50
;Time which player lies down for, before getting up
liedown.time = 60
;Number of points for juggling
airjuggle = 99999
;Default hit spark number for HitDefs
sparkno = 2
;Default guard spark number
guard.sparkno = 40
;1 to enable echo on KO
KO.echo = 0
;Volume offset (negative for softer)
volume = 0
;Variables with this index and above will not have their values
;reset to 0 between rounds or matches. There are 60 int variables,
;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
;If omitted, then it defaults to 60 and 40 for integer and float
;variables repectively, meaning that none are persistent, i.e. all
;are reset. If you want your variables to persist between matches,
;you need to override state 5900 from common1.cns.
IntPersistIndex = 0;60
FloatPersistIndex = 0;40

[Size]
xscale = 1           ;Horizontal scaling factor.
yscale = 1           ;Vertical scaling factor.
ground.back = 15     ;Player width (back, ground)
ground.front = 16    ;Player width (front, ground)
air.back = 12        ;Player width (back, air)
air.front = 12       ;Player width (front, air)
height = 60          ;Height of player (for opponent to jump over)
attack.dist = 160    ;Default attack distance
proj.attack.dist = 90 ;Default attack distance for projectiles
proj.doscale = 0     ;Set to 1 to scale projectiles too
head.pos = -5, -90   ;Approximate position of head
mid.pos = -5, -60    ;Approximate position of midsection
shadowoffset = 0     ;Number of pixels to vertically offset the shadow
draw.offset = 0,0    ;Player drawing offset in pixels (x, y). Recommended 0,0

[Velocity]
walk.fwd  = 2.4      ;Walk forward
walk.back = -2.2     ;Walk backward
run.fwd  =9.2, 0    ;Run forward (x, y)
run.back = -6.5,-3.8 ;Hop backward (x, y)
jump.neu     = 0,-10      ;垂直ジャンプの速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
	jump.back    = -3.15       ;後方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
	jump.fwd     = 3.75        ;前方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）

	runjump.back = -2.45,-10.5  ;後方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
	runjump.fwd  = 4.4,-10.5       ;.
airjump.neu = 0,-8.1      ;.
airjump.back = -2.55      ;Air jump speeds (opt)
airjump.fwd = 2.5         ;.
air.gethit.groundrecover = -.15,-3.5  ;Velocity for ground recovery state (x, y) **MUGEN 1.0**
air.gethit.airrecover.mul = .5,.2     ;Multiplier for air recovery velocity (x, y) **MUGEN 1.0**
air.gethit.airrecover.add = 0,-4.5    ;Velocity offset for air recovery (x, y) **MUGEN 1.0**
air.gethit.airrecover.back = -1       ;Extra x-velocity for holding back during air recovery **MUGEN 1.0**
air.gethit.airrecover.fwd = 0         ;Extra x-velocity for holding forward during air recovery **MUGEN 1.0**
air.gethit.airrecover.up = -2         ;Extra y-velocity for holding up during air recovery **MUGEN 1.0**
air.gethit.airrecover.down = 1.5      ;Extra y-velocity for holding down during air recovery **MUGEN 1.0**

[Movement]
airjump.num = 0      ;Number of air jumps allowed (opt)
airjump.height = 35   ;Minimum distance from ground before you can air jump (opt)
yaccel = .51          ;Vertical acceleration
stand.friction = .85  ;Friction coefficient when standing
crouch.friction = .82 ;Friction coefficient when crouching
stand.friction.threshold = 2          ;If player's speed drops below this threshold while standing, stop his movement **MUGEN 1.0**
crouch.friction.threshold = .05       ;If player's speed drops below this threshold while crouching, stop his movement **MUGEN 1.0**
air.gethit.groundlevel = 25           ;Y-position at which a falling player is considered to hit the ground **MUGEN 1.0**
air.gethit.groundrecover.ground.threshold = -20 ;Y-position below which falling player can use the recovery command **MUGEN 1.0**
air.gethit.groundrecover.groundlevel = 10   ;Y-position at which player in the ground recovery state touches the ground **MUGEN 1.0**
air.gethit.airrecover.threshold = -1  ;Y-velocity above which player may use the air recovery command **MUGEN 1.0**
air.gethit.airrecover.yaccel = .35    ;Vertical acceleration for player in the air recovery state **MUGEN 1.0**
air.gethit.trip.groundlevel = 15      ;Y-position at which player in the tripped state touches the ground **MUGEN 1.0**
down.bounce.offset = 0, 20            ;Offset for player bouncing off the ground (x, y) **MUGEN 1.0**
down.bounce.yaccel = .4               ;Vertical acceleration for player bouncing off the ground **MUGEN 1.0**
down.bounce.groundlevel = 12          ;Y-position at which player bouncing off the ground touches the ground again **MUGEN 1.0**
down.friction.threshold = .05         ;If the player's speed drops below this threshold while lying down, stop his movement **MUGEN 1.0**

;Default language victory quotes (optional).  **MUGEN 1.0**
;If this section is included, the default language victory quotes must be in English.
[Quotes]
; Up to 100 victory quotes can be specified per language (victory0 - victory99)
victory1 = "Never underestimate a lady!!"
victory2 = "Could we discuss this over tea sometime!?"


;---------------------------------------------------------------------------
; Variable usage:
; This is a record of the variables that KFM uses. Keeping a record of your
; variable usage helps you avoid careless mistakes later.
; var(1)  - Used in kfm.cmd for combo condition (updated every tick)
; var(2)  - Used in Kung Fu Throw (state 800) to remember if fwd was being
;           held (remembered from state 800 through state 810).


;---------------------------------------------------------------------------
; Lose by Time Over
; CNS difficulty: basic
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0



[State 0, ChangeAnim]
type = ChangeState
trigger1 = roundno=1
trigger1=  teammode=single
trigger1=losetime
value = 175
;elem = 1
ignorehitpause = 1
persistent = 0

[State -3, KOボイス]
type = playsnd
trigger1 = time=0
trigger1=anim=170
;trigger1 = time = 0
value = S170,0
channel = 2
lowpriority = 1
ignorehitpause = 1
persistent=0

[State -3, KOボイス]
type = playsnd
trigger1 = animelem=3
trigger1=anim=170
;trigger1 = time = 0
value = S0,9
channel = -1
lowpriority = 1
ignorehitpause = 1
persistent=0

[State 170, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;-----------------------------------------------

; Draw game (time over)
[Statedef 175]
type = S
ctrl = 0
velset = 0,0

[State 175, 1] ; If no anim, use go to lose state.
type = null;ChangeState
trigger1 = Time = 0
;trigger1 = !SelfAnimExist(175)
value = 170

[State 175, 2]
type = ChangeAnim
trigger1 = Time = 0
value = 175

[State -3, KOボイス]
type = playsnd
trigger1 = animelem=3
trigger1=anim=175
;trigger1 = time = 0
value = S1000,7
channel = 2
lowpriority = 1
ignorehitpause = 1
persistent=0

[State 175, 3]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Win state decider
; CNS difficulty: basic
[Statedef 180]
type = S





[State 180, 1]
type = ChangeState
trigger1 = Time = 0
value = 181

;---------------------------------------------------------------------------
; Win pose 1 - Bow
; CNS difficulty: basic
[Statedef 181]
type = S
ctrl = 0
anim = 181
velset = 0,0

[State -3, KOボイス]
type = playsnd
trigger1 = time=0
;trigger1 = time = 0
value = S180,0+random%3
channel = 2
lowpriority = 1
ignorehitpause = 1
persistent=0

[State 181, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Introduction
; CNS difficulty: basic
[Statedef 191]
type = S
ctrl = 0
anim = 190
velset = 0,0

[State 191, 1] ;Freeze animation until PreIntro is over
type = ChangeAnim
trigger1 = RoundState = 0
value = 190

[State -3, KOボイス]
type = playsnd
trigger1 = time=0
;trigger1 = time = 0
value = S190,0
channel = 2
lowpriority = 1
ignorehitpause = 1
persistent=0


[State 191, 2] ;Assert this until you want "round 1, fight" to begin
type = AssertSpecial
trigger1 = 1
flag = Intro

[State 191, 3] ;Change to stand state when done
type = ChangeState
trigger1 = AnimTime = 0
value = 0

;---------------------------------------------------------------------------
; Taunt
; CNS difficulty: easy
[Statedef 195]
type = S
ctrl = 0
anim = 195
velset = 0,0
movetype = I
physics = S
sprpriority = 2

[State 195, 1]
type = CtrlSet
trigger1 = Time = 40
value = 1

[State 195, 2]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1




;////////////////////////////////////////////////////////////////////:
[Statedef -2]



[State -2, DefenceMulSet]
Type = DefenceMulSet
Trigger1 = Life <= 300
Value = 0.7
IgnoreHitPause = 1

[State -2, DefenceMulSet]
Type = DefenceMulSet
Trigger1 = Life <= 150
Value = 0.5
IgnoreHitPause = 1

[State -2, PowerAdd]
type = PowerAdd
trigger1 = 1
value = 0

[State 0, Width]
type = Width
trigger1 = stateno!=[2000,3999]
edge = 15,0
;value = 0,0
ignorehitpause = 1
;persistent = 

;Gives 1000 at the start of the battle
[State -2,初期ゲージ設定]
	Type= PowerSet
	trigger1 = roundsexisted = 0 && roundstate = 0 && roundno = 1;
	value = 1000 ; 0〜6000で設定可能 1000単位で1本 デフォルトは1000

;RD 0 set
[State -2,初期ゲージ設定]
	Type= VarSet
	trigger1 = roundstate = 0;
	fvar(7) = 0;


;RD Mode set
[State -2,初期ゲージ設定]
	Type= VarSet
	trigger1 = fvar(7)=0
	var(20) = 0;

;DamageDampening Reset
[State -2]
	type = Varset
	trigger1 = enemy,movetype != H
	trigger2 = enemy,stateno = [120,155]
	fv = 0
	value = 1
	ignorehitpause = 1


[State -2];補正
	type = Varset
	trigger1 = enemy,movetype != H
	trigger2 = enemy,stateno = [120,155]
	fv = 10
	value = 1
	ignorehitpause = 1

;Cornerpush reset
[State -2];ヒットバック
	type = Varset
	trigger1 = enemy,movetype != H
	trigger2 = enemy,stateno = [120,155]
	fvar(11)=0
	ignorehitpause = 1
;Air dash count reset
[State -2];ループ
 	type = Varset
 	triggerAll = var(17)
	trigger1 = statetype != A
	trigger2 = movetype = H
 	var(17)=0
	ignorehitpause = 1

;Kick bounce reset
[State -2]
	type = Varset
	trigger1 = enemy,movetype != H
	trigger2 = enemy,stateno = [120,155]
	var(6)=0
	ignorehitpause = 1

;RC Counter reset
[State -2]
	type = Varset
	trigger1 = enemy,movetype != H
	trigger2 = enemy,stateno = [120,155]
	var(35)=0
	ignorehitpause = 1

;RDGaugeHelper
[State -2]
	type = Helper
	trigger1 = Numhelper(30001) = 0
	trigger1 = time = 1
	stateno = 30001
	ID = 30001
	pos = 0,0
	postype = left
	helpertype = normal
	name = "gauge"
	keyctrl = 0
	ownpal = 1
	pausemovetime = 9999
	supermovetime = 9999

;BurstHelper
[State -2]
	type = Helper
	trigger1 = Numhelper(30002) = 0
	trigger1 = time = 1
	stateno = 30002
	ID = 30002
	pos = 0,0
	postype = left
	helpertype = normal
	name = "burstgauge"
	keyctrl = 0
	ownpal = 1
	pausemovetime = 9999
	supermovetime = 9999



;Charge Explod Remove
[State -2, remove]
Type=RemoveExplod
Trigger1 = stateno!=700
ID = 130

;Kick Flurry B Input Reset
[State -2]
	type = Varset
	trigger1 = fvar(31)=0
	var(31)=0
	ignorehitpause = 1

;Kick Flurry C Input Reset
[State -2]
	type = Varset
	trigger1 = fvar(32)=0
	var(32)=0
	ignorehitpause = 1

;Kick Flurry B Input Press
[State -2]
	type = Varset
	trigger1 = command = "b"
	fvar(31)=15
	ignorehitpause = 1

;Kick Flurry C Input Press
[State -2]
	type = Varset
	trigger1 = command = "c"
	fvar(32)=15
	ignorehitpause = 1

;Kick Flurry B Input Press
[State -2]
	type = VarAdd
	trigger1 = fvar(31)=15
	var(31)=1
	ignorehitpause = 0

;Kick Flurry C Input Press
[State -2]
	type = VarAdd
	trigger1 = fvar(32)=15
	var(32)=1
	ignorehitpause = 0

;Kick Flurry B Input Timer
[State -2]
	type = VarAdd
	trigger1 = fvar(31)>0
	fvar(31)=-1
	ignorehitpause = 1

;Kick Flurry C Input Timer
[State -2]
	type = Varset
	trigger1 = fvar(32)>0
	fvar(32)=-1
	ignorehitpause = 1



[Statedef -3]

;Gethit sounds
[State -3, Get Hit Sounds]
type = PlaySnd
triggerall = alive && time = 1
trigger1 = (stateno = 5000 || stateno = 5010 || stateno = 5020 || stateno = 5070 || stateno = 5080)
trigger1 = enemynear,hitdefattr = SCA,NA,SA,HA
value = S5000,0+(random%4)
volume = 255
channel = 0

;KO Sound
[State -3, 変数 KOボイス重複スイッチ初期化]
type = VarSet
trigger1 = var(43)
trigger1 = Alive
var(43) = 0
ignorehitpause = 1

[State -3, KOボイス]
type = playsnd
trigger1 = !Alive
trigger1 = !Var(43)
;trigger1 = time = 0
value = S11,4+random%3
channel = 2
lowpriority = 1
ignorehitpause = 1
persistent=0

[State -3, 変数 KOボイス重複防止]
type = VarSet
trigger1 = !var(43)
trigger1 = !Alive
var(43) = 1
ignorehitpause = 1


[State 0, StopSnd]
type = StopSnd
trigger1 = roundstate = 2 && time = 0 && stateno = 0
channel = 2
;ignorehitpause = 
;persistent = 


;var(6) is ground bounce counter for tekken stuff
;var(20) is RD mode (0 is none, 1 is normal, 2 is advanced)
;var(31) is the kick flurry button push counter for B(3 unlocks the move)
;var(32) is the kick flurry button push counter for C(3 unlocks the move)
;fvar(7) is RD timer
;fvar(31) is the kick flurry button push timer for B (ends after 15 ticks)
;fvar(32) is the kick flurry button push timer for C (ends after 15 ticks)